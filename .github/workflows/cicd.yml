on:
  push:
    branches:
      - master
      - prod
  pull_request:
    types: [closed,opened]

name: dotnet-pipeline

jobs:
  continuous-integration:
    name: ci-cd-pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        working-directory: ./infra
        run: terraform fmt -check

      - name: Terraform Non-prod Init
        working-directory: ./infra
        id: init
        run: terraform init -backend-config=bucket="terraform-state-bucket-cicd" -backend-config="key= "non-prod/terraform-state-non-prod.json" -backend-config="region="us-east-1"

      - name: Terraform Prod Init
        if: github.ref == 'refs/heads/prod'
        working-directory: ./infra
        id: init
        run: terraform init -backend-config=bucket="terraform-state-bucket-cicd" -backend-config="key="prod/terraform-state-prod.json" -backend-config="region="us-east-1"

      - name: Terraform Validate
        working-directory: ./infra
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./infra
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        working-directory: ./infra
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Non-Prod-Apply
        working-directory: ./infra
        run: terraform apply -var-file=environment/non-prod-properties.tfvars --auto-approve

      - name: Terraform Prod-Apply
        if: github.ref == 'refs/heads/prod'
        working-directory: ./infra
        run: terraform apply -var-file=environment/prod-properties.tfvars --auto-approve

      - name: Login to Amazon ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Non-Prod-Build,Tag,Push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: webapi-nonprod
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Prod-Build,Tag,Push
        # Publish if prod branch
        if: github.ref == 'refs/heads/prod'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: webapi-prod
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Logout of ECR
        if: always()
        run: docker logout ${{steps.login-ecr.outputs.registry}}
  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION}}
      # - name: Create CodeDeploy Deployment
      #   id: deploy-non-prod
      #   run: |
      #     aws deploy create-deployment \
      #       --application-name webapi-nonprod \
      #       --deployment-group-name AppDeploymentGroupName \
      #       --deployment-config-name CodeDeployDefault.OneAtATime \
      #       --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
      # - name: Create CodeDeploy Deployment
      #   if: github.ref == 'refs/heads/prod'
      #   id: deploy-prod
      #   run: |
      #     aws deploy create-deployment \
      #       --application-name webapi-nonprod \
      #       --deployment-group-name AppDeploymentGroupName \
      #       --deployment-config-name CodeDeployDefault.OneAtATime \
      #       --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
