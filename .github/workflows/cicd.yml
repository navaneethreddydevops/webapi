on:
  push:
    branches:
      - dev
      - qa
      - prod
  pull_request:
    types: [merged]

name: dotnet-pipeline

jobs:
  continuous-integration:
    name: ci-cd-pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION}}

      - name: Login to Amazon ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Non-Prod-Build,Tag,Push
        id: non-prod-build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: webapi-nonprod
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Prod-Build,Tag,Push
        # Publish if prod branch
        id: prod-build
        if: github.ref == 'refs/heads/prod'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: webapi-prod
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Logout of ECR
        if: always()
        run: docker logout ${{steps.login-ecr.outputs.registry}}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-non-prod
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/qa'
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: web-api
          image: ${{ steps.non-prod-build.outputs.image }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        if: github.ref == 'refs/heads/prod'
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: web-api
          image: ${{ steps.prod-build.outputs.image }}

      - name: Deploy Amazon ECS task definition
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/qa'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: web-api-service
          cluster: micro-service-cluster
          wait-for-service-stability: true

      - name: Deploy Amazon ECS task definition
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/qa'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: web-api-service
          cluster: micro-service-cluster
          wait-for-service-stability: true
